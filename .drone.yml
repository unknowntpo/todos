kind: pipeline
name: default
workspace:
  base: /go
  path: src/github.com/unknowntpo/todos
steps:
  - name: test
    image: golang:alpine
    commands:
      #- apk add --no-cache make
      #- go install honnef.co/go/tools/cmd/staticcheck@latest
      #- make vendor
      #- make audit
  - name: build
    image: golang
    commands:
      #- make build/api
      #- chmod +x ./bin/api
  - name: test-testcontainer
    image: quay.io/testcontainers/dind-drone-plugin
    privileged: true
    environment:
      CI_WORKSPACE: "/drone/src"
    settings:
      # This specifies the command that should be executed to perform build, test and
      #  integration tests. Not to be confused with Drone's `command`:
      cmd: sleep 5 && ./gradlew clean check --info
      # This image will run the cmd with your build steps
      build_image: adoptopenjdk:14-openj9
      # Not mandatory; enables pre-fetching of images in parallel with the build, so may save
      #  time:
      prefetch_images:
        - "redis:4.0.6"
      # Not mandatory; sets up image name 'aliases' by pulling from one registry and tagging
      #  as a different name. Intended as a simplistic mechanism for using a private registry
      #  rather than Docker Hub for a known set of images. Accepts a dictionary of
      #  private registry image name to the Docker Hub image that it is a substitute for.
      #  Note that all images are pulled synchronously before the build starts, so this is
      #  inefficient if any unnecessary images are listed.
      image_aliases:
        someregistry.com/redis:4.0.6: redis:4.0.6
      volumes:
        - name: dockersock
          path: /var/run
  - name: integration_test
    image: golang:alpine
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
    commands:
    #- sleep 20 # give docker enough time to initialize
    - apk add --no-cache make build-base docker-cli
    - docker ps -a
    - make test/integration
  - name: coverage
    image: plugins/codecov
    settings:
      token:
        from_secret: codecov_token
      files:
        - '*.go'
      required: true
  #  - name: deploy
#    image: docker:dind
#    privileged: true
#    environment:
#      DRONE_DEPLOY_HOST:
#        from_secret: deploy_host
#      DRONE_DEPLOY_USERNAME:
#        from_secret: deploy_user
#    volumes:
#      - name: dockersock
#        path: /var/run
#    commands:
#      - sleep 30 # give docker enough time to initialize
#      - docker ps -a
#      - echo $${DRONE_DEPLOY_HOST}
#      - echo $${DRONE_DEPLOY_USERNAME}
#      - docker context create remote --docker "host=ssh://$${DRONE_DEPLOY_HOST}@$${DRONE_DEPLOY_USERNAME}"
#      # - make run/compose/up
#      # todo fetch from docker hub
#      - DOCKER_BUILDKIT=1 docker-compose \
#        -f docker-compose-prod.yml \
#        --project-name todos-prod \
#        build --parallel
#      - docker-compose -f docker-compose-prod.yml \
#        --context remote \
#        --env-file .envrc \
#        up \
#        -d \
#        --remove-orphans \
#        --force-recreate

# Specify docker:dind as a service
# Ref: https://github.com/testcontainers/dind-drone-plugin
services:
- name: docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
  detach: true
volumes:
  - name: dockersock
    temp: {}
