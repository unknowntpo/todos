kind: pipeline
type: docker
name: default
platform:
  os: linux
  arch: amd64
node:
  machine: digitalocean
workspace:
  base: /go
  path: src/github.com/unknowntpo/todos
steps:
  - name: test
    image: golang:1.16-alpine
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make build-base
      - go install honnef.co/go/tools/cmd/staticcheck@latest
      - cp .envrc.example .envrc
      - make vendor
      - make audit
  - name: build
    image: golang:1.16-alpine
    commands:
      #- make build/api
      #- chmod +x ./bin/api
  - name: push-image
    image: docker:20-dind
    privileged: true
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make git
      - sleep 30 # wait for docker daemon finishing setup.
      - docker ps -a
      - cp .envrc.example .envrc
      - make image/build/server
      - make image/build/config
      # Ref: https://0-8-0.docs.drone.io/manage-secrets/
      - docker login --username $${DOCKER_USERNAME} --password $${DOCKER_PASSWORD}
      - make image/push/server
      - make image/push/config
  - name: deploy
    image: docker:20-dind
    privileged: true
    environment:
      REMOTE_DOCKER_HOST:
        from_secret: remote_docker_host
      POSTGRES_USER:
        from_secret: postgres_user
      POSTGRES_PASSWORD:
        from_secret: postgres_password
      POSTGRES_DB:
        from_secret: postgres_db
      TODOS_APP_DB_DSN:
        from_secret: todos_app_db_dsn
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache make git
      - docker ps -a
      - docker context create production --docker "host=$${REMOTE_DOCKER_HOST}"
      - docker context use production
      - docker context list
      - echo $${REMOTE_DOCKER_HOST}
  - name: coverage
    image: plugins/codecov
    settings:
      token:
        from_secret: codecov_token
      files:
        - '*.go'
      required: true
  #  - name: deploy
#    image: docker:20-dind
#    privileged: true
#    environment:
#      DRONE_DEPLOY_HOST:
#        from_secret: deploy_host
#      DRONE_DEPLOY_USERNAME:
#        from_secret: deploy_user
#    volumes:
#      - name: dockersock
#        path: /var/run
#    commands:
#      - sleep 30 # give docker enough time to initialize
#      - docker ps -a
#      - echo $${DRONE_DEPLOY_HOST}
#      - echo $${DRONE_DEPLOY_USERNAME}
#      - docker context create remote --docker "host=ssh://$${DRONE_DEPLOY_HOST}@$${DRONE_DEPLOY_USERNAME}"
#      # - make run/compose/up
#      # todo fetch from docker hub
#      - DOCKER_BUILDKIT=1 docker-compose \
#        -f docker-compose-prod.yml \
#        --project-name todos-prod \
#        build --parallel
#      - docker-compose -f docker-compose-prod.yml \
#        --context remote \
#        --env-file .envrc \
#        up \
#        -d \
#        --remove-orphans \
#        --force-recreate

# Specify docker:20-dind as a service
# Ref: https://github.com/testcontainers/dind-drone-plugin
services:
- name: docker
  image: docker:20-dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run
  detach: true
volumes:
  - name: dockersock
    temp: {}
