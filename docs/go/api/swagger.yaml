openapi: 3.0.0
info:
  title: TODOS API
  description: "Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/)\
    \ or HTML."
  version: 0.1.9
servers:
- url: https://todos.unknowntpo.net
  description: Main (production) server
- url: http://localhost:4000
  description: Internal staging server for testing
paths:
  /v1/healthcheck:
    get:
      summary: Returns status of service.
      description: None.
      responses:
        "200":
          description: A JSON object of status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
  /v1/{userId}/tasks:
    get:
      summary: Returns all tasks for user identified by userId.
      parameters:
      - name: userId
        in: path
        description: user's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: A json object with json array of tasks inside.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTasksResponse'
    post:
      summary: Create a new task for user 'user_id'
      description: None.
      parameters:
      - name: userId
        in: path
        description: user's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        "201":
          description: Return the information of created task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskResponse'
  /v1/{userId}/tasks/{taskId}:
    get:
      summary: Returns all tasks for user identified by userId.
      parameters:
      - name: userId
        in: path
        description: user's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      - name: taskId
        in: path
        description: tasks's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: A json object with json array of tasks inside.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskByIdResponse'
    delete:
      summary: Delete task by id for specific user.
      parameters:
      - name: userId
        in: path
        description: user's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      - name: taskId
        in: path
        description: tasks's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Return message telling user that task is successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTaskByIdResponse'
    patch:
      summary: Update task for specific user.
      parameters:
      - name: userId
        in: path
        description: user's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      - name: taskId
        in: path
        description: tasks's id.
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskByIdRequest'
      responses:
        "200":
          description: Returns updated task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskByIdResponse'
  /v1/users/registration:
    post:
      summary: Register user based on given information.
      description: None.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        "202":
          description: User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
  /v1/users/activation:
    post:
      summary: Activate the user by the given token.
      description: None.
      parameters:
      - name: token
        in: query
        description: token that represents the user who want to be activated.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Returns activated user information.
  /v1/tokens/authentication:
    post:
      summary: Authenticate the user based on given token.
      description: None.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        "201":
          description: Returns the authentication with expiry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
components:
  schemas:
    Task:
      properties:
        title:
          type: string
        content:
          type: string
        user_id:
          type: integer
        done:
          type: boolean
        version:
          type: integer
      example:
        user_id: 2
        title: title
        done: true
        version: 7
        content: content
    User:
      required:
      - activated
      - created_at
      - email
      - id
      - name
      properties:
        id:
          type: string
        created_at:
          type: string
        name:
          type: string
        email:
          type: string
        activated:
          type: boolean
      example:
        name: name
        created_at: created_at
        id: id
        email: email
        activated: true
    GetAllTasksResponse:
      required:
      - tasks
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
      example:
        metadata:
          first_page: 1
          last_page: 5
          total_records: 5
          current_page: 0
          page_size: 6
        tasks:
        - user_id: 2
          title: title
          done: true
          version: 7
          content: content
        - user_id: 2
          title: title
          done: true
          version: 7
          content: content
    GetTaskByIdResponse:
      required:
      - task
      properties:
        task:
          $ref: '#/components/schemas/Task'
      example:
        task:
          user_id: 2
          title: title
          done: true
          version: 7
          content: content
    CreateTaskRequest:
      required:
      - content
      - done
      - title
      - user_id
      properties:
        title:
          type: string
        content:
          type: string
        done:
          type: boolean
    CreateTaskResponse:
      properties:
        task:
          $ref: '#/components/schemas/Task'
      example:
        task:
          user_id: 2
          title: title
          done: true
          version: 7
          content: content
    UpdateTaskByIdRequest:
      properties:
        title:
          type: string
        content:
          type: string
        done:
          type: boolean
    UpdateTaskByIdResponse:
      required:
      - task
      properties:
        task:
          $ref: '#/components/schemas/Task'
      example:
        task:
          user_id: 2
          title: title
          done: true
          version: 7
          content: content
    DeleteTaskByIdResponse:
      properties:
        message:
          type: string
      example:
        message: message
    Metadata:
      properties:
        current_page:
          type: integer
        page_size:
          type: integer
        first_page:
          type: integer
        last_page:
          type: integer
        total_records:
          type: integer
      example:
        first_page: 1
        last_page: 5
        total_records: 5
        current_page: 0
        page_size: 6
    HealthcheckResponse:
      required:
      - environment
      - status
      - version
      properties:
        status:
          type: string
        environment:
          type: string
        version:
          type: string
      example:
        environment: environment
        version: version
        status: status
    UserRegistrationRequest:
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserRegistrationResponse:
      properties:
        user:
          $ref: '#/components/schemas/User'
      example:
        user:
          name: name
          created_at: created_at
          id: id
          email: email
          activated: true
    AuthenticationRequest:
      required:
      - email
      - password
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticationResponse:
      required:
      - expiry
      - token
      properties:
        token:
          type: string
        expiry:
          type: string
      example:
        expiry: expiry
        token: token
