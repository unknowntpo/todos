openapi: 3.0.0
info:
  title: TODOS API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: https://todos.unknowntpo.net
    description: Main (production) server
  - url: http://localhost:4000
    description: Internal staging server for testing
paths:
  /v1/healthcheck:
    get:
      summary: Returns status of service.
      description: None.
      responses:
        '200':
          description: A JSON object of status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
  /v1/{userId}/tasks:
    get:
      summary: Returns all tasks for user identified by userId.
      parameters:
        - name: userId
          in: path
          required: true
          description: user's id.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A json object with json array of tasks inside.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTasksResponse'
    post:
      summary: Create a new task for user 'user_id'
      description: None.
      parameters:
        - name: userId
          in: path
          required: true
          description: user's id.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Return the information of created task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskResponse'  
  /v1/{userId}/tasks/{taskId}:
    get:
      summary: Returns all tasks for user identified by userId.
      parameters:
        - name: userId
          in: path
          required: true
          description: user's id.
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: taskId
          in: path
          required: true
          description: tasks's id.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A json object with json array of tasks inside.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskByIdResponse'
    patch:
      summary: Update task for specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: user's id.
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: taskId
          in: path
          required: true
          description: tasks's id.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskByIdRequest'
      responses:
        '200':
          description: Returns updated task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskByIdResponse'
    delete:
      summary: Delete task by id for specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: user's id.
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: taskId
          in: path
          required: true
          description: tasks's id.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Return message telling user that task is successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTaskByIdResponse'
  /v1/users/registration:
    post:
      summary:  Register user based on given information.
      description: None.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '202':
          description: User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
  /v1/users/activation:
    put:
      summary: Activate the user by the given token.
      description: None.
      parameters:
      - name: token
        in: query
        description: token that represents the user who want to be activated.
        required: true 
        schema:
          type: string
      responses:
        '200':
          description: Returns activated user information.
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/UserActivationResponse'
  /v1/tokens/authentication:
    post:
      summary: Authenticate the user based on given token.
      description: None.
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '201':
          description: Returns the authentication with expiry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  
components:
  schemas:
    Task:
      properties:
        title:
          type: string
        content:
          type: string
        user_id:
          type: integer
        done:
          type: boolean
        version:
          type: integer
    User:
      properties:
        id:
          type: string
        created_at:
          type: string
        name:
          type: string
        email:
          type: string
        activated:
          type: boolean
      required:
        - id
        - created_at
        - name
        - email
        - activated
    GetAllTasksResponse:
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        tasks:
          type: array
          items: {
            $ref: '#/components/schemas/Task'
          }
      required:  
        - tasks
    GetTaskByIdResponse:
      properties:
        task:
          $ref: '#/components/schemas/Task'
      required:  
        - task
    CreateTaskRequest:
      properties:
        title:
          type: string
        content:
          type: string
        done:
          type: boolean
      required:
        - user_id
        - title
        - content
        - done
    CreateTaskResponse:
      properties:
        task:
          $ref: '#/components/schemas/Task'
    UpdateTaskByIdRequest:
      properties:
        title:
          type: string
        content:
          type: string
        done:
          type: boolean
    UpdateTaskByIdResponse:
      properties:
        task:
          $ref: '#/components/schemas/Task'
      required:  
        - task
    DeleteTaskByIdResponse:
      properties:
        message: 
          type: string
    Metadata:
      properties:
        current_page:
          type: integer
        page_size:
          type: integer
        first_page:
          type: integer
        last_page:
          type: integer
        total_records:
          type: integer
    HealthcheckResponse:
      properties:
        status:
          type: string
        environment:
          type: string
        version:
          type: string
      required:
        - status
        - environment
        - version    
    UserRegistrationRequest:
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserRegistrationResponse:
      properties:
        user:
          $ref: '#/components/schemas/User'  
    UserActivationResponse:
      properties:
        user:
          $ref: '#/components/schemas/User'  
    AuthenticationRequest:
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthenticationResponse:
      properties:
        token:
          type: string
        expiry:
          type: string
      required:
        - token
        - expiry