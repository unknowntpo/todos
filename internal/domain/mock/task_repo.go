// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/unknowntpo/todos/internal/domain"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskRepository) Delete(ctx context.Context, userID int64, taskID int64) error {
	ret := _m.Called(ctx, userID, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, userID, title, filters
func (_m *TaskRepository) GetAll(ctx context.Context, userID int64, title string, filters domain.Filters) ([]*domain.Task, domain.Metadata, error) {
	ret := _m.Called(ctx, userID, title, filters)

	var r0 []*domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, domain.Filters) []*domain.Task); ok {
		r0 = rf(ctx, userID, title, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	var r1 domain.Metadata
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, domain.Filters) domain.Metadata); ok {
		r1 = rf(ctx, userID, title, filters)
	} else {
		r1 = ret.Get(1).(domain.Metadata)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, string, domain.Filters) error); ok {
		r2 = rf(ctx, userID, title, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskRepository) GetByID(ctx context.Context, userID int64, taskID int64) (*domain.Task, error) {
	ret := _m.Called(ctx, userID, taskID)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *domain.Task); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, userID, task
func (_m *TaskRepository) Insert(ctx context.Context, userID int64, task *domain.Task) error {
	ret := _m.Called(ctx, userID, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Task) error); ok {
		r0 = rf(ctx, userID, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, task
func (_m *TaskRepository) Update(ctx context.Context, task *domain.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
